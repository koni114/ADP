iris %>% select(match("Sep"))
# 8. 정규 표현식에 해당하는 컬럼 선택
iris %>% select(ends_with("Length"))
iris %>% select(one_of(vars))
# 9. 변수 이름 글부에 포함된 모든 열 선택
vars <- c("test1", "test2", "test3")
iris %>% select(one_of(vars))
iris %>% select(num_range("V", 2:3))
data.frame(V = c(1,2,3,4,5), V2 = c('A', 'B', 'C', 'D', 'E'))
test <- data.frame(V = c(1,2,3,4,5), V2 = c('A', 'B', 'C', 'D', 'E'))
test %>% sample_n(3, replace F)
test %>% sample_n(3, replace  = F)
test %>% sample_n(3, replace  = F)
test %>% sample_n(3, replace  = F)
iris %>% group_by(Species) %>% sample_n(10)
iris %>% mutate(  sum  = Sepal.Length + Petal.Length
, sum2 = Sepal.Length + Petal.Length)
df.name <- data.frame(ID = c(1:3), name = c("Chulsu/Kim", "Younghei/Lee", "Dongho/Choi"))
df.name
do.call("rbind", strsplit(df.name$name))
do.call("rbind", strsplit(df.name$name, fixed = T))
strsplit
do.call("rbind", strsplit(x = df.name$name, split = "/",  fixed = T))
do.call("rbind", strsplit(x = df.name$name, split = "/")
do.call("rbind", strsplit(x = df.name$name, split = "/"))
do.call("rbind", strsplit(x = df.name$name, split = "/"))
df.name$name
df.name <- data.frame(ID = c(1:3), name = c("Chulsu/Kim", "Younghei/Lee", "Dongho/Choi"), stringsAsFactors = F)
df.name
do.call("rbind", strsplit(x = df.name$name, split = "/"))
do.call("rbind", strsplit(x = df.name$name, split = "/")
) %>% data.frame
write.fwf
data.frame(V = c(1,2,3,4,5,6), V1 = c("A", "B", "C", "D", "E"))
test <- data.frame(V = c(1,2,3,4,5,6), V1 = c("A", "B", "C", "D", "E"))
write.table(test
file = "C:/r"
)
write.table(test,
file = "C:/r"
)
write.table(test,
file = "C:/r/"
)
test
write.table(test,
file = "C:/r"
)
write.table(test,
file = "C:/r"
)
write.table(x = test,
file = "C:/r"
)
write.table(x = test1,
file = "C:/r"
)
test1 <- data.frame(V = c(1,2,3,4,5,6), V1 = c("A", "B", "C", "D", "E"))
write.table(x = test1,
file = "C:/r"
)
test1
test1 <- data.frame(V = c(1,2,3,4,5,6), V1 = c("A", "B", "C", "D", "E", "F"))
write.table(x = test1,
file = "C:/r"
)
write.table(x = test1,
file = "test1.txt"
)
write.table(x = test1,
file = "test1.txt",
fixed = F
)
write.table(x = test1,
file = "test1.txt",
row.names =  F
)
read.fwf("test1.txt", widths = c(1, 1))
read.fwf("test1.txt", widths = c(2, 2))
read.fwf("test1.txt", widths = c(2, 3))
read.fwf("test1.txt", widths = c(1, 1), sep = " ")
read.fwf("test1.txt", widths = c(1, 1, 1 ), sep = " ")
read.fwf("test1.txt", widths = c(1), sep = " ")
rep(1:10)
seq(from = 1, to = 10)
## 데이터 통합
test1 <- data.frame( class = c(1, 2, 3, 4, 5)
,test  = c(90, 80, 85, 40, 30))
## 데이터 통합
test1 <- data.frame( class = c(1, 2, 3, 4, 5)
,type1  = c(90, 80, 85, 40, 30))
test2 <- data.frame(class = c(1,2,3,4,6),
type2 = c(100, 200, 300, 400, 500))
# 1. dplyr::left_join()
dplyr::left_join(test1 ,test2)
dplyr::right_join(test1 ,test2)
dplyr::bind_rows
# 2. dplyr::bind_rows()
dplyr::bind_rows(test1, test2)
dplyr
# 3. rbind, cbind
# binding 처리시, 컬럼명이 맞지 않는 경우, error 발생
rbind(test1, test2)
merge
merge(test1, test2 , by = c('class'))
merge(test1, test2 , by = c('class'), all.x =  T)
merge(test1, test2 , by = c('class'), all   =  T) # full outer join
## data pivoting
## reshape melt, dcast
library(reshape)
library(MASS)
str(Cars93)
head(Cars93)
# 차종(Type) 중에서 개수가 적은 "Compact"와 "Van" 만 선별해서 예제로 사용
Cars93_v1 <- Cars93 %>% dplyr::select(Type, Origin, MPG.city, MPG.highway) %>% filter(Type %in% c('Compact', 'Van'))
library(dplyr)
# 차종(Type) 중에서 개수가 적은 "Compact"와 "Van" 만 선별해서 예제로 사용
Cars93_v1 <- Cars93 %>% dplyr::select(Type, Origin, MPG.city, MPG.highway) %>% filter(Type %in% c('Compact', 'Van'))
# 차종(Type) 중에서 개수가 적은 "Compact"와 "Van" 만 선별해서 예제로 사용
Cars93_v1 <- Cars93 %>% dplyr::select(Type, Origin, MPG.city, MPG.highway) %>% filter(Type %in% c('Compact', 'Van'))
Cars93_v1
melt(  Cars93_v1
, id.vars      = c('Type', 'Origin')
, measure.vars = c('MPG.city', 'MPG.highway'))
head(Cars93_melt)
Cars93_melt <- melt(  Cars93_v1
, id.vars      = c('Type', 'Origin')
, measure.vars = c('MPG.city', 'MPG.highway'))
head(Cars93_melt)
cast(Cars93_melt, Type ~ variable, fun = mean)
cast(Cars93_melt, Type ~ variable)
Cars93_v1
head(Cars93_melt)
## 2. reshape::acast function
library(gcookbook)
data(cabbage_exp)
install.packages("gcookbook")
## 2. reshape::acast function
library(gcookbook)
data(cabbage_exp)
head(cabbage_exp)
reshape2::acast(data = cabbage_exp,
formula = Cultivar ~ Date,
value.var = 'Weight')
reshape2::acast(data = cabbage_exp,
formula = Cultivar ~ Date,
value.var = 'Weight',
fun.aggregate = mean)
## 1. split function
split(x = iris, iris$Species)
## 1. split function
iris_split <- split(x = iris, iris$Species)
## 1. split function
## return Data type은 list
iris_split <- split(x = iris, iris$Species)
iris_split[[1]]
iris_split[[2]]
iris_split[[3]]
iris_split
## 두가지 컬럼을 기준으로 split 하는 경우,
infert
head(infert)
str(infert)
unique(infert$case)
## 두가지 컬럼을 기준으로 split 하는 경우,
split(infert, list(infert$education, infert$case))
## 2. 문자열 분할
## nchar(), substr(), paste0(), strsplit(), sub(), gsub()
x <- c("Seoul", "New York", "London", "1234")
nchar(x)
## 2.2 substr(x, start, stop)
substr(x, 1, 3)
## 2.3 strsplit : 문자형 벡터 x를 기준으로 나누기
##                return value는 list
name <- c("Chulsu, Kim", "Younghei, Lee", "Dongho, Choi")
strsplit(name, split = ',')
## 2.3 strsplit : 문자형 벡터 x를 기준으로 나누기
##                return value는 list
name       <- c("Chulsu, Kim", "Younghei, Lee", "Dongho, Choi")
split_name <- strsplit(name, split = ',')
split_name
split_name[1][[2]]
split_name[[1]][2]
## 3. dataframe에서 문자열 기호를 기준으로 컬럼을 나누는 방법
test <- data.frame(ID = c(1:3), name = c("Chulsu/Kim", "Younghei/Lee", "Dongho/Choi"))
test
do.call('rbind', split(as.character()))
do.call('rbind', split(as.character(test$name), '/'))
do.call('rbind', strsplit(as.character(test$name), '/'))
do.call('rbind', strsplit(as.character(test$name), '/')
) %>% data.frame
## 4. 문자열 벡터에서 특정 부분 문자열 패턴 찾기
grep("1010", c('1010101', '1001010', '10010101'))
regexpr("1010", c('1010101', '1001010', '10010101'))
gregexpr("NY", "I love NY and I'm from NY")
## 5. str_split
## strsplit function과 동일한 역할 수행
## str_split 같은 경우, 내가 나누고자 하는 개수를 지정할 수 있음
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
fruits
## 5. stringr::str_split
## strsplit function과 동일한 역할 수행
## str_split 같은 경우, 내가 나누고자 하는 개수를 지정할 수 있음
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
stringr::str_split(fruits, n = 2)
stringr::str_split(fruits, pattern = "and ", n = 2)
## dplyr package에서 컬럼 분할하는 방법?
mtcars
Animals
MASS::Boston
MASS::Traffic
Titanic
## 결측치 처리
getwd()
## 결측치 처리
setwd("C:/ADP자료/")
# 1. 행 제거
# 1.1 is.na function
housing <- data.table::fread("housing.csv")
housing
# 1. 행 제거
# 1.1 is.na function
housing <- data.table::fread("housing.csv"
) %>% data.frame()
## 결측치 처리
library(dplyr)
is.na(Titanic)
is.na(housing)
housing
# 1. 행 제거
# 1.1 is.na function
housing <- data.table::fread("housing.csv"
) %>% data.frame()
housing
str(housing)
is.na(housing)
# 1. 행 제거
# 1.1 is.na function
titanic <- data.table::fread("titanic.csv"
) %>% data.frame()
titanic
is.na(titanic)
rowsum(is.na(titanic))
is.na(titanic)
rowsum(is.na(titanic))
sum(is.na(titanic))
titanic %>%  filter(is.na
titanic %>%  filter(is.na)
# 1. 행 제거
# 1.1 is.na function
titanic <- data.table::fread("titanic.csv"
) %>% data.frame()
titanic
titanic %>%  filter(is.na)
titanic %>%  filter(is.na(x))
titanic %>%  filter(is.na(.))
is.na(titanic)
rowSums(is.na(titanic))
View(titanic)
titanic[rowSums(is.na(titanic)) == 0,]
titanic_removeRow <- titanic[rowSums(is.na(titanic)) == 0,]
titanic_removeRow
drop_na
drop_na
df %>% filter_all(~ !is.na(.))
titanic %>% filter_all(~ !is.na(.))
nrow(titanic)
tt <- titanic %>% filter_all(~ !is.na(.))
nrow(tt)
titanic %>% filter_all(all_vars(!is.na(.)))
titanic %>% filter_all(all_vars(!is.na(.) | . == ""))
all_vars
View(titanic)
complete.cases(complete.cases)
complete.cases(titanic)
titanic[!complete.cases(titanic),]
# 1.2 complete.cases function
head(titanic)
complete.cases(titanic)
titanic
# 1.2 complete.cases function
titanic[complete.cases(titanic),]
# 2. 열 제거
# 2.1 is.na function
colSums(is.na(titanic)) == 0
# 2. 열 제거
# 2.1 is.na function
titanic[colSums(is.na(titanic)) == 0]
colSums(is.na(titanic) == 0 | titanic == "")
is.na(titanic) == 0 & titanic == ""
colSums(is.na(titanic) == 0 & titanic == "")
colSums(is.na(titanic) == 0 | titanic == "")
colSums(is.na(titanic)) == 0 | colSums(titanic == "") == 0
titanic == ""
titanic %>%  dplyr::select(is.na(.))
dplyr::select_if
# 2.2  dplyr package를 활용한 열제거
titanic %>%  dplyr::select_if(is.na(.))
# 2.2  dplyr package를 활용한 열제거
titanic %>%  dplyr::select_if(~!is.na(.))
# 2.2  dplyr package를 활용한 열제거
titanic %>%  dplyr::select_if(~ !any(is.na(.)))
# 2.2  dplyr package를 활용한 열제거
titanic_removeCol <- titanic %>%  dplyr::select_if(~ !any(is.na(.)))
head(titanic_removeCol)
titanic_removeCol
# 3. 결측치 대체
# 4. 평균 값
df %>% mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = T), .x))
# 3. 결측치 대체
# 4. 평균 값
titanic %>% mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = T), .x))
# 3. 결측치 대체
# 4. 평균 값
titanic %>% mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = T), .x))
# 5. 이전 값
x <- c(NA, 1, 4, 5, 6, NA, 1)
L <- !is.na(x)
L
x <- unlist(list(x[L][1], x[L]))[cumsum(L) + 1]
x
unlist(list(x[L][1], x[L]))[cumsum(L) + 1]
unlist(list(x[L][1], x[L]))[cumsum(L) + 1]
unlist(list(x[L][1], x[L]))[cumsum(L) + 1]
x <- unlist(list(x[L][1], x[L]))[cumsum(L) - 1]
# 5. 이전 값
x <- c(NA, 1, 4, 5, 6, NA, 1)
L <- !is.na(x)
x <- unlist(list(x[L][1], x[L]))[cumsum(L) - 1]
list(x[L][1]
list(x[L][1], x[L])
unlist(list(x[L][1], x[L]))
setwd("C:/ADP자료/")
titanic <- data.table::fread("titanic.csv"
) %>% data.frame()
## IQR
## InterQuantile Range
colnames(titanic)
titanic %>% select_if(is.numeric)
titanic %>% select_if(is.numeric) %>% summarise(mean = mean(.x, na.rm = x))
titanic %>% select_if(is.numeric) %>% summarise_all(mean = mean(.x, na.rm = x))
titanic %>% select_if(is.numeric) %>% summarise_all(mean = mean(., na.rm = .))
titanic %>% select_if(is.numeric) %>% summarise_all(MENA = mean(., na.rm = .))
titanic %>% select_if(is.numeric) %>% summarise_all(MEAN = mean(., na.rm = T))
titanic %>% select_if(is.numeric) %>% summarise_all(MEAN = mean(,na.rm = T))
titanic %>% select_if(is.numeric) %>% summarise_all(MEAN = mean(x, na.rm = T))
titanic %>% select_if(is.numeric) %>% summarise_all(MEAN = mean(., na.rm = T))
titanic %>% select_if(is.numeric) %>% summarise_all(list(min, max))
titanic %>% select_if(is.numeric) %>% summarise_all(list(min = min, max = max))
titanic %>% select_if(is.numeric) %>% summarise_all(list(min = min(na.rm = T), max = max(na.rm = T)))
titanic %>% select_if(is.numeric) %>% summarise_all(list(median = median(na.rm = T), quantile = quantile()))
titanic %>% select_if(is.numeric) %>% summarise_all(list(median = median(na.rm = T), quantile = quantile)
titanic %>% select_if(is.numeric) %>% summarise_all(list(median = median(na.rm = T), quantile = quantile))
titanic %>% select_if(is.numeric) %>% summarise_all(median = median(na.rm = T), quantile = quantile))
titanic %>% select_if(is.numeric) %>% summarise_all(median = median(na.rm = T), quantile = quantile)
titanic %>% select_if(is.numeric) %>% summarise_all(median = median(na.rm = T))
titanic %>%
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))
across
titanic %>% select_if(is.numeric) %>% summarise(median = median(na.rm = T))
titanic %>% select_if(is.numeric) %>% summarise(median = median(., na.rm = T))
library(psych)
psych::describe(titanic)
install.packages("psych")
library(psych)
psych::describe(titanic)
install.packages("mnormt")
titanic %>% select_if(is.numeric) %>% summarise_all(funs(sum, mean))
titanic %>% select_if(is.numeric) %>% summarise_all(funs(sum, mean(na.rm = T)))
titanic %>% select_if(is.numeric) %>% summarise_all(funs(sum, mean(.,na.rm = T)))
titanic %>% select_if(is.numeric) %>% summarise_all(funs(sum(., na.rm = T), mean(.,na.rm = T)))
titanic %>% select_if(is.numeric) %>% summarise_all(funs(  sum(., na.rm = T)
, mean(.,na.rm = T)
, median(., na.rm = T)
, sd(., na.rm = T)))
titanic %>% select_if(is.numeric) %>% summarise_all(funs(  sum(., na.rm = T)
, mean(.,na.rm = T)
, median(., na.rm = T)
, sd(., na.rm = T)))
titanic %>% select_if(is.numeric) %>% summarise_all(funs(  sum(., na.rm = T)
, mean(.,na.rm = T)
, median(., na.rm = T)
, sd(., na.rm = T)
, IQR(., na.rm = T)))
, IQR(., na.rm = T))) %>% select(contains("AGE"))
, IQR(., na.rm = T))) %>% select(contains("AGE")
, IQR(., na.rm = T))) %>% select(contains("AGE"))
titanic %>% select_if(is.numeric) %>% summarise_all(funs(  sum(., na.rm = T)
, mean(.,na.rm = T)
, median(., na.rm = T)
, sd(., na.rm = T)
, IQR(., na.rm = T))
) %>% select(contains("AGE"))
age_summary <- titanic %>% select_if(is.numeric) %>% summarise_all(funs(  sum(., na.rm = T)
, mean(.,na.rm = T)
, median(., na.rm = T)
, sd(., na.rm = T)
, IQR(., na.rm = T))
) %>% select(contains("AGE"))
titanic %>% select_if(is.numeric)
titanic %>% select_if(is.numeric) %>% mutate_all(outlier_lower = IQR
titanic %>% select_if(is.numeric) %>% mutate_all(outlier_lower = IQR)
titanic %>% select_if(is.numeric) %>% mutate_all(outlier_lower = funs(IQR))
titanic %>% select_if(is.numeric) %>% mutate_all(funs(IQR))
titanic %>% select_if(is.numeric) %>% mutate_all(funs(IQR(na.rm = T)))
## IQR
## InterQuantile Range
IQR_Treat <- function(x){
IQR_Value  <- IQR(x, na.rm = T)
medi_value <- median(x, na.rm = T)
c(medi_value - 1.5*IQR_Value, medi_value + 1.5*IQR_Value)
}
titanic %>% select_if(is.numeric) %>% summarise_all(funs(IQR_Treat))
titanic %>% select_if(is.numeric) %>% summarise_all(funs(mean))
titanic %>% select_if(is.numeric) %>% summarise_all(funs(IQR_Treat))
titanic %>% select_if(is.numeric)
titanic %>% select(Pclass, Age, SibSp, Parch, Fare) %>% summarise_all(funs(IQR_Treat))
## IQR
## InterQuantile Range
IQR_Treat <- function(x){
IQR_Value  <- IQR(x, na.rm = T)
medi_value <- median(x, na.rm = T)
c(medi_value - 1.5*IQR_Value, medi_value + 1.5*IQR_Value)
}
titanic %>% select(Pclass, Age, SibSp, Parch, Fare) %>% summarise_all(funs(IQR_Treat))
IQR_Treat(c(1,2,3,4,5,3,2,1,2,3,4,44,4,3,2))
## IQR
## InterQuantile Range
IQR_Treat_lower <- function(x){
IQR_Value  <- IQR(x, na.rm = T)
medi_value <- median(x, na.rm = T)
c(medi_value - 1.5*IQR_Value)
}
IQR_Treat_upper <- function(x){
IQR_Value  <- IQR(x, na.rm = T)
medi_value <- median(x, na.rm = T)
c(medi_value + 1.5*IQR_Value)
}
titanic %>% select(Pclass, Age, SibSp, Parch, Fare) %>% summarise_all(funs(IQR_Treat_lower, IQR_Treat_upper))
## 백분위 수
titanic %>% select(Pclass, Age, SibSp, Parch, Fare) %>% summarise(PCT10 = quantile(., 0.1, na.rm = T))
## 백분위 수
titanic %>% select(Pclass, Age, SibSp, Parch, Fare) %>% summarise_all(quantile(., 0.1, na.rm = T))
## 백분위 수
titanic %>% select(Pclass, Age, SibSp, Parch, Fare) %>% summarise_all(funs(quantile(., 0.1, na.rm = T)))
## 백분위 수
PCT10 <- function(x) quantile(x, 0.1, na.rm = T)
PCT90 <- function(x) quantile(x, 0.9, na.rm = T)
titanic %>% select(Pclass, Age, SibSp, Parch, Fare) %>% summarise_all(func(PCT10, PCT90))
## 백분위 수
PCT10 <- function(x) quantile(x, 0.1, na.rm = T)
PCT90 <- function(x) quantile(x, 0.9, na.rm = T)
titanic %>% select(Pclass, Age, SibSp, Parch, Fare) %>% summarise_all(func(PCT10, PCT90))
titanic %>% select(Pclass, Age, SibSp, Parch, Fare) %>% summarise_all(funs(PCT10, PCT90))
titanic_PCT <- titanic %>% select(Pclass, Age, SibSp, Parch, Fare) %>% summarise_all(funs(PCT10, PCT90))
titanic %>% mutate_if(Age = ifelse(Age < titanic_PCT[1] | Age > titanic_PCT[2], NA, Age))
titanic %>% mutate(Age = ifelse(Age < titanic_PCT[1] | Age > titanic_PCT[2], NA, Age))
titanic_PCT
titanic_PCT <- titanic %>% select(Pclass, Age, SibSp, Parch, Fare) %>% summarise_all(funs(PCT10, PCT90)) %>% select(contains("Age"))
titanic_PCT
titanic %>% mutate(Age = ifelse(Age < titanic_PCT[1] | Age > titanic_PCT[2], NA, Age))
titanic_PCT
# 이상치 대체 값
head(titanic)
titanic %>% mutate(Age = ifelse(Age < titanic_PCT[1] | Age > titanic_PCT[2], NA, Age))
tt <- titanic %>% mutate(Age = ifelse(Age < titanic_PCT[1] | Age > titanic_PCT[2], NA, Age))
tt$Age
titanic$Age < titanic_PCT[1] | titanic$Age > titanic_PCT[2]
titanic$Age < titanic_PCT[1] || titanic$Age > titanic_PCT[2]
titanic_PCT
titanic$Age < titanic_PCT[1]
titanic_PCT[1]
, Parch, Fare) %>% summarise_all(funs(PCT10, PCT90)) %>% select(contains("Age")) %>% unlist()
titanic_PCT
titanic_PCT <- titanic %>% select(Pclass, Age, SibSp
, Parch, Fare) %>% summarise_all(funs(PCT10, PCT90)) %>% select(contains("Age")
) %>% unlist()
titanic_PCT
, Parch, Fare) %>% summarise_all(funs(PCT10, PCT90)) %>% select(contains("Age")
titanic_PCT
, Parch, Fare) %>% summarise_all(funs(PCT10, PCT90)) %>% select(contains("Age"))
titanic_PCT <- titanic %>% select(Pclass, Age, SibSp
, Parch, Fare) %>% summarise_all(funs(PCT10, PCT90)) %>% select(contains("Age"))
titanic_PCT
titanic_PCT[1]
titanic$Age
## NA
str(titanic_PCT[1])
titanic_PCT[,1:@]
titanic_PCT <- titanic %>% select(Pclass, Age, SibSp
, Parch, Fare) %>% summarise_all(funs(PCT10, PCT90)) %>% select(contains("Age")
) %>%  as.vector
titanic_PCT
is.vector(titanic_PCT)
titanic_PCT[1]
tt <- titanic %>% mutate(Age = ifelse(Age < as.numeric(titanic_PCT[1]) | Age > as.numeric(titanic_PCT[2]), NA, Age))
tt
titanic
titanic_PCT
titanic %>% mutate(Age = ifelse(Age < as.numeric(titanic_PCT[1]) | Age > as.numeric(titanic_PCT[2]), NA, Age))
head(tt)
head(tt,20)
head(titanic, 20)
tt
tt
tt
