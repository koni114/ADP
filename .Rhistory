## 2. 문자형, 범주형
iris <- iris %>% mutate_if(is.factor, as.character
## 2. 문자형, 범주형
iris <- iris %>% mutate_if(is.factor, as.character)
## 2. 문자형, 범주형
iris <- iris %>% mutate_if(is.factor, as.character)
str(iris)
iris %>% select_if(function(col) is.character(col)) %>% summarise_all(list(mode = ~ group_by(.)))
iris %>% select_if(function(col) is.character(col)) %>% summarise_all(list(mode = ~ function(.) group_by(.) %>% tally())
iris %>% select_if(function(col) is.character(col)) %>% summarise_all(list(mode = ~ function(.) {group_by(.) %>% tally()})
iris %>% select_if(function(col) is.character(col)) %>% summarise_all(list(mode = ~ function(.) {group_by(.) %>% tally()})
iris %>% select_if(function(col) is.character(col)) %>% summarise_all(list(mode = ~ function(.) {group_by(.) %>% tally()})
iris %>% select_if(function(col) is.character(col)) %>% summarise_all(list(mode = ~ function(.) {group_by(.) %>% tally()}))
iris %>% select_if(function(col) is.character(col)) %>% summarise_all(list(mode = ~ function(.) {group_by(.) %>% tally()}))
mode <- function(codes){
which.max(tabulate(codes))
}
mode(c('A', 'B', 'B', 'A'))
mode(as.factor(c('A', 'B', 'B', 'A')))
mode <- function(codes){
which.max(tabulate(codes))
}
tabulate
as.factor(c('A', 'B', 'A', 'B'))
tabulate(as.factor(c('A', 'B', 'A', 'B')))
which.max(tabulate(as.factor(c('A', 'B', 'A', 'B'))))
iris %>% group_by(Species)
iris %>% group_by(Species) %>% summarise(mode = mode(.))
iris %>% group_by(Species) %>% summarise(mode = mode())
iris %>% group_by(Species) %>% summarise(mode = mode(.))
mode <- function(codes){
which.max(tabulate(codes))
}
iris %>% group_by(Species) %>% summarise(mode = mode(.))
iris %>% group_by(Species) %>% summarise(mode = mode())
str(iris)
iris %>% group_by(Species) %>% summarise(mode = mode())
iris %>% group_by(Species)
iris %>% group_by(Species) %>% summarise(mode = mode(Species))
iris %>% group_by(Species) %>% summarise(n = n())
iris %>% group_by(Species) %>% tally()
library(fBasics)
install.packages("fBasics")
library(fBasics)
## 1. 수치형
#  평균, 중앙값, 표준편차, 최소, 최대, 1분위수, 3분위수, 백분위(95%, 90%, 10%, 5%)
iris %>% select_if(is.numeric) %>% summarise_all(list(  ~ n()
, ~ mean(., na.rm   = T)
, ~ median(., na.rm = T)
, ~ sd(.,  na.rm = T)
, ~ min(., na.rm = T)
, ~ max(., na.rm = T)
, Q1  = ~ quantile(., 0.25, na.rm = T)
, Q3  = ~ quantile(., 0.75, na.rm = T)
, PCT05 = ~ quantile(., 0.05, na.rm = T)
, PCT10 = ~ quantile(., 0.1, na.rm = T)
, PCT90 = ~ quantile(., 0.9, na.rm = T)
, PCT95 = ~ quantile(., 0.95, na.rm = T)
, skew  = ~ fBasics::skewness(.)
))
skewness
## 1. 수치형
#  평균, 중앙값, 표준편차, 최소, 최대, 1분위수, 3분위수, 백분위(95%, 90%, 10%, 5%)
iris %>% select_if(is.numeric) %>% summarise_all(list(  ~ n()
, ~ mean(., na.rm   = T)
, ~ median(., na.rm = T)
, ~ sd(.,  na.rm = T)
, ~ min(., na.rm = T)
, ~ max(., na.rm = T)
, Q1  = ~ quantile(., 0.25, na.rm = T)
, Q3  = ~ quantile(., 0.75, na.rm = T)
, PCT05 = ~ quantile(., 0.05, na.rm = T)
, PCT10 = ~ quantile(., 0.1, na.rm = T)
, PCT90 = ~ quantile(., 0.9, na.rm = T)
, PCT95 = ~ quantile(., 0.95, na.rm = T)
, skew  = ~ skewness(.)
))
## 1. 수치형
#  평균, 중앙값, 표준편차, 최소, 최대, 1분위수, 3분위수, 백분위(95%, 90%, 10%, 5%)
iris %>% select_if(is.numeric) %>% summarise_all(list(  ~ n()
, ~ mean(., na.rm   = T)
, ~ median(., na.rm = T)
, ~ sd(.,  na.rm = T)
, ~ min(., na.rm = T)
, ~ max(., na.rm = T)
, Q1  = ~ quantile(., 0.25, na.rm = T)
, Q3  = ~ quantile(., 0.75, na.rm = T)
, PCT05 = ~ quantile(., 0.05, na.rm = T)
, PCT10 = ~ quantile(., 0.1, na.rm = T)
, PCT90 = ~ quantile(., 0.9, na.rm = T)
, PCT95 = ~ quantile(., 0.95, na.rm = T)
, skew  = ~ timeDate::skewness(.)
, krto  = ~ timeDate::kurtosis(.)
))
## ggplot2 설치
install.packages("ggplot2")
## (1) 필수 메인 함수 ggplot ----
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width))
library(ggplot2)
## (1) 필수 메인 함수 ggplot ----
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width))
ggplot(data    = iris,
mapping = aes(x = Sepal.Length,
y = Sepal.Width)) + geom_point()
## (3) 그래프에 대한 색상, 모양, 크기, 넓이 지정하기 ----
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(  colour = "red"
, pch    = 2
, size   = 2)
## (4) 그룹별 옵션 지정 ----
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(  colour = c('red', 'green', 'blue')[iris$Species]
, pch    = (0, 2, 20)[iris$Species]
, size   = c(1, 1.5, 2)[iris$Species])
## (4) 그룹별 옵션 지정 ----
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(  colour = c('red', 'green', 'blue')[iris$Species]
, pch    = c(0, 2, 20)[iris$Species]
, size   = c(1, 1.5, 2)[iris$Species])
# 5.2 annotate() 함수 사용
p <- ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(  colour = c('red', 'green', 'blue')[iris$Species]
, pch    = c(0, 2, 20)[iris$Species]
, size   = c(1, 1.5, 2)[iris$Species])
# Species가 모두 겹치는 부분을 사각형으로 표기하기
# 1. Species 별 Sepal.Length, Sepal.Width의 최소값과 최대값을 tmp에 할당
library(dplyr)
iris %>% select(Sepal.Length, Sepal.Width) %>%  group_by(Species)
colnames(iris)
iris %>% select(Sepal.Length, Sepal.Width, Species) %>%  group_by(Species) %>% summarise_all(  min = ~ min(., na.rm = T)
, max = ~ max(., na.rm = T))
iris %>% select(Sepal.Length, Sepal.Width, Species) %>%  group_by(Species) %>% summarise_all(list(  min = ~ min(., na.rm = T)
, max = ~ max(., na.rm = T)))
iris_summary <- iris %>% select(Sepal.Length, Sepal.Width, Species) %>%  group_by(Species) %>% summarise_all(list(  min = ~ min(., na.rm = T)
, max = ~ max(., na.rm = T)))
x_max <- max(iris_summary$Sepal.Length_min)
x_max
start_x <- max(iris_summary$Sepal.Length_min)
end_x   <- min(iris_summary$Sepal.Length_max)
start_y <- max(iris_summary$Sepal.Width_min)
end_y   <- min(iris_summary$Sepal.Width_max)
g <- g + annotate(  geom = "rec"
, xmin = start_x
, xmax = end_x
, ymin = start_y
, ymax = end_x)
p <- p + annotate(  geom = "rec"
, xmin = start_x
, xmax = end_x
, ymin = start_y
, ymax = end_x)
p <- p + annotate(  geom = "rect"
, xmin = start_x
, xmax = end_x
, ymin = start_y
, ymax = end_x)
p
p <- p + annotate(  geom = "rect"
, xmin = start_x
, xmax = end_x
, ymin = start_y
, ymax = end_y
, fill = "red"
, alpha = 0.2
, colour = "black"
, lty    = 2)
p
# 5.2 annotate() 함수 사용
p <- ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(  colour = c('red', 'green', 'blue')[iris$Species]
, pch    = c(0, 2, 20)[iris$Species]
, size   = c(1, 1.5, 2)[iris$Species])
p <- p + annotate(  geom = "rect"
, xmin = start_x
, xmax = end_x
, ymin = start_y
, ymax = end_y
, fill = "red"
, alpha = 0.2
, colour = "black"
, lty    = 2)
p
# 5.2 annotate() 함수 사용
p1 <- ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(  colour = c('red', 'green', 'blue')[iris$Species]
, pch    = c(0, 2, 20)[iris$Species]
, size   = c(1, 1.5, 2)[iris$Species])
# annotate function은 geom 옵션으로 어떤 도형을 그릴 것인지 결정하고,
# 그에 따라서 세부옵션이 따라 붙음
p <- p1 + annotate(  geom = "segment"
, x    = c(start_x, end_x, -Inf, -Inf)
, xend = c(start_x, end_x, Inf, Inf)
, y    = c(-Inf, -Inf, end_y, start_y)
, yend = c(Inf, Inf, end_y, start_y)
, colour = "black", alpha = 0.5, lty = 2, size = 1)
p
p <- p1 + annotate( geom    = "text"
, x      = iris$Sepal.Length
, y      = iris$Sepal.Width
, label  = rownames(iris)
, colour = "brown"
, alpha  = 0.7
, size   = 3
, hjust  = 0.5
, vjust  = -1)
p <- p1 + annotate( geom    = "text"
, x      = iris$Sepal.Length
, y      = iris$Sepal.Width
, label  = rownames(iris)
, colour = "brown"
, alpha  = 0.7
, size   = 3
, hjust  = 0.5
, vjust  = -1)
p
p <- p1 + coord_flip()
p
# 축 범위    : coord_cartesian()
p <- p1 + coord_cartesian(  xlim = c(start_x, end_x)
, ylim = c(start_y, end_y ))
p
p1 + labs(  title    = "제목"
, subtitle = "부제목"
, caption  = "주석"
, x        = "x축이름"
, y        = "y축이름")
1:nrow(iris)
# 1. iris data에 seq 붙이기
dplyr::bind_cols(iris, 1:nrow(iris))
iris
# 1. iris data에 seq 붙이기
dplyr::bind_cols(iris, data.frame(1:nrow(iris)))
# 1. iris data에 seq 붙이기
iris_seq <- dplyr::bind_cols(data.frame(1:nrow(iris)), iris)
iris_seq
topo.colors(4, alpha = 0.5)
cols     <- topo.colors(4, alpha = 0.5)
cols
names(data)[2:5]
# 1. iris data에 seq 붙이기
data        <- dplyr::bind_cols(data.frame(1:nrow(iris)), iris)
names(data)[2:5]
names(cols) <- names(data)[2:5]
cols
# 2. 그래프를 위한 데이터 변환
library(reshape2)
melt(data, id.vars = c("seq", "Species"))
names(data)
# 1. iris data에 seq 붙이기
data        <- dplyr::bind_cols(data.frame("seq" = 1:nrow(iris)), iris)
data
cols        <- topo.colors(4, alpha = 0.5)
names(cols) <- names(data)[2:5]
# 2. 그래프를 위한 데이터 변환
library(reshape2)
melt(data, id.vars = c("seq", "Species"))
# 2. 그래프를 위한 데이터 변환
library(reshape2)
melt_data <- melt(data, id.vars = c("seq", "Species"))
melt_data
library(ggplot2)
head(melt_data)
g <- ggplot(melt_data) + geom_line(aes(x = seq, y = value, colour = variable), cex = 0.8, show.legend = T)
g
g1 <- ggplot(melt_data) + geom_line(aes(x = seq, y = value, colour = variable), cex = 0.8, show.legend = T)
# 4. 선 색상, 라벨링 수행
g <- g1 + scale_color_manual( name   = "변수명"
, values = cols[melt_data$variable]
, labels = c('꽃받침 길이', "꽃받침 너비", "꽃잎 길이", "꽃잎 너비"))
g
## 산점도
library(ggplot2)
colnames(iris)
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width))
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(colour = c('red', 'green', 'blue')[iris$Species])
# 그룹별(Species) 산점도 각각 그리고 싶을 때,
p <- ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + facet_grid(Species ~.)
p
# 그룹별(Species) 산점도 각각 그리고 싶을 때,
p <- ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)+ geom_point()
) + facet_grid(Species ~.)
p
+ facet_grid(Species ~.)
# 그룹별(Species) 산점도 각각 그리고 싶을 때,
p <- ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point() + facet_grid(Species ~.)
p
## 산점도
library(ggplot2)
colnames(iris)
## 산점도 그리기
p <- ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(colour = c('red', 'green', 'blue')[iris$Species])
## 산점도 그리기
p <- ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(colour = c('red', 'green', 'blue')[iris$Species])
p
## 두 점선 그래프 한 그래프로 그리기
library(reshape2)
reshape2::melt(data = iris,
id.vars = c('Species'))
iris_melt <- reshape2::melt(data = iris,
id.vars = c('Species'))
# 3. 산점도에 추세선 그리기
#  stat_smooth(method = 'lm')
p1 <- p + stat smooth(method ='lm')
# 3. 산점도에 추세선 그리기
#  stat_smooth(method = 'lm')
p1 <- p + stat_smooth(method ='lm')
p1
# 4. 산점도에 text 추가하기
p2 <- p1 + geom_text(x = 45, y = 450, label = 'y=6.452x-18.142')
p2
# 4. 산점도에 text 추가하기
p2 <- p1 + geom_text(x = 45, y = 450, label = 'y=6.452x-18.142') +  geom_text(x=85, y=405, label="R²=0.8917")
p2
# 3. 산점도에 추세선 그리기
#  stat_smooth(method = 'lm')
p1 <- p + stat_smooth(method ='lm')
# 4. 산점도에 text 추가하기
p2 <- p1 + geom_text(x = 45, y = 450, label = 'y=6.452x-18.142') +  geom_text(x=85, y=405, label="R²=0.8917")
p2
p2
# 3. 산점도에 추세선 그리기
#  stat_smooth(method = 'lm')
p1 <- p + stat_smooth(method ='lm', se = F, color = 'black')
p1
# 4. 산점도에 text 추가하기
p2 <- p1 + geom_text(x = 45, y = 450, label = 'y=6.452x-18.142') +  geom_text(x=85, y=405, label="R²=0.8917")
p2
# 5. 조건별 산점도 색깔을 변경하고 싶을 때,
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(aes(color = ifelse(x < 50, 'a', 'b')))
# 5. 조건별 산점도 색깔을 변경하고 싶을 때,
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(aes(color = ifelse(Sepal.Length < 50, 'a', 'b')))
# 5. 조건별 산점도 색깔을 변경하고 싶을 때,
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(aes(color = ifelse(Sepal.Length < 5, 'a', 'b')))
# 5. 조건별 산점도 색깔을 변경하고 싶을 때,
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(aes(color = ifelse(Sepal.Length < 5, 'a', 'b'))
) +   scale_color_manual(values=c('red', 'blue'))
# 5. 조건별 산점도 색깔을 변경하고 싶을 때,
# --> Sepal.Length 가 5보다 작으면 red, 크거나 같으면 blue로 setting
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(aes(color = ifelse(Sepal.Length < 5, 'a', 'b'))
) +   scale_color_manual(values=c('red', 'blue')
) + geom_text(x = 45, y = 450, label = 'y=6.452x-18.142')
# 5. 조건별 산점도 색깔을 변경하고 싶을 때,
# --> Sepal.Length 가 5보다 작으면 red, 크거나 같으면 blue로 setting
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(aes(color = ifelse(Sepal.Length < 5, 'a', 'b'))
) +   scale_color_manual(values=c('red', 'blue')
) + + labs(  title    = "제목"
, subtitle = "부제목"
, caption  = "주석"
, x        = "x축이름"
, y        = "y축이름")
# 5. 조건별 산점도 색깔을 변경하고 싶을 때,
# --> Sepal.Length 가 5보다 작으면 red, 크거나 같으면 blue로 setting
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(aes(color = ifelse(Sepal.Length < 5, 'a', 'b'))
) +   scale_color_manual(values=c('red', 'blue')
) + labs(  title    = "제목"
, subtitle = "부제목"
, caption  = "주석"
, x        = "x축이름"
, y        = "y축이름")
#  범례의 제목 및 항목명 변경하기
#  scale_color_manual : 점, 선 그래프
#  scale_fill_manual  : 막대 그래프
ggplot(data=mtcars) +
geom_bar(mapping = aes(x = cyl, fill = as.factor(am)), position = "dodge") +
theme(legend.position = "bottom") +
scale_fill_manual(values = c("red","green"),
name   = ("범례제목"),
breaks = c(0,1),
labels = c("값1","값2"))
# 5. 조건별 산점도 색깔을 변경하고 싶을 때,
# --> Sepal.Length 가 5보다 작으면 red, 크거나 같으면 blue로 setting
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(aes(color = ifelse(Sepal.Length < 5, 'a', 'b'))
) +   scale_color_manual(values=c('red', 'blue')
)
# 5. 조건별 산점도 색깔을 변경하고 싶을 때,
# --> Sepal.Length 가 5보다 작으면 red, 크거나 같으면 blue로 setting
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(aes(color = ifelse(Sepal.Length < 5, 'a', 'b'))
) +   scale_color_manual(values = c('red', 'blue'),
name   = c("범례제목"),
labels = c('label1', 'label2')
)
) + geom_point(aes(color = ifelse(Sepal.Length < 5, 'a', 'b')) +  guides(fill="none")
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(aes(color = ifelse(Sepal.Length < 5, 'a', 'b'))) +  guides(fill="none")
ggplot(data    = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point(aes(color = ifelse(Sepal.Length < 5, 'a', 'b'))) +  guides(fill="none")
# scale_fill_discrete : 간단한 범례 제목, label 변경시 사용
ggplot(data=mtcars) +
geom_bar(mapping = aes(x = cyl, fill = as.factor(am)), position = "dodge") +
theme(legend.position = "bottom") + scale_fill_discrete(name= '범례제목', labels = c('값1', '값2'))
ggplot(data=mtcars, mapping = aes(x=hp, y=mpg)) +
geom_point(aes(color=as.factor(am))) +
geom_text(aes(label=rownames(mtcars)), check_overlap = T)
# args function
#
args(geom_histogram)
# 1) default STAT 대신에 다른 것을 쓰고 싶을 때
# 예를들어 히스토그램에서 빈도수 대신에 밀도를 보여주고 싶다면, default ..count.. 대신 ..density.. 사용
ggplot(data = mtcars, mapping = aes(x=cyl)) +
geom_histogram(mapping = aes(y=..density..), binwidth=1)
# 2) 계산된 통계값인 STAT이 아닌, 데이터셋에 있는 변수로 그래프를 직접 그리고자 할 때
# 예를들어 geom_bar()은 기본 y축 STAT이 count 임
# 그런데, 데이터에 있는 다른 지표로 그래프를 그리고자 할때 사용
name <- c('a', 'b', 'c')
value <- c(80, 90, 100)
dd    <- data.frame(name, value)
dd
ggplot(data = dd, mapping = aes(x = name, y = value)) + geom_bar()
# stat="identity" 는 geom_bar의 STAT 값을 원데이터셋에 있는 값으로 쓰겠다는 것을 설정하는 의미
ggplot(data = dd, mapping = aes(x = name, y = value)) + geom_bar(stat="identity")
# ggplot2  : POSITION --> dodge, fill, identity, fitter, stack
ggplot(data=mtcars) + geom_bar(mapping = aes(x=cyl))
# ggplot2  : POSITION --> dodge, fill, identity, fitter, stack 5개의 종류로 구성
#
ggplot(data=mtcars) + geom_bar(mapping = aes(x=cyl), fill = as.factor(am))
# ggplot2  : POSITION --> dodge, fill, identity, fitter, stack 5개의 종류로 구성
#
ggplot(data = mtcars) + geom_bar(mapping = aes(x=cyl, fill = as.factor(am))
# ggplot2  : POSITION --> dodge, fill, identity, fitter, stack 5개의 종류로 구성
#
ggplot(data = mtcars) + geom_bar(mapping = aes(x=cyl, fill = as.factor(am)))
# ggplot2  : POSITION --> dodge, fill, identity, fitter, stack 5개의 종류로 구성
#
ggplot(data = mtcars) + geom_bar(mapping  = aes(x=cyl, fill = as.factor(am)),
position = 'stacl')
# ggplot2  : POSITION --> dodge, fill, identity, fitter, stack 5개의 종류로 구성
#
ggplot(data = mtcars) + geom_bar(mapping  = aes(x=cyl, fill = as.factor(am)),
position = 'stack')
# (2).
ggplot(data = mtcars) + geom_bar(mapping  = aes(x=cyl, fill = as.factor(am)),
position = 'dodge')
# (3). fill  : 100% 기준 누적 막대 그래프를 그림. 세로 축의 count 값 1을 기준으로 그래프가 그려져 있음
ggplot(data = mtcars) + geom_bar(mapping  = aes(x=cyl, fill = as.factor(am)),
position = 'fill')
# (4). identity : 위치 조정을 적용하지 않고, 그래프를 겹쳐서 막대 그래프를 그림
ggplot(data=mtcars) + geom_bar(mapping = aes(x=cyl, fill=as.factor(am))
, position = "identity")
# (5). jitter : 값들이 겹치지 않도록 값을 조금씩 움직이는 것을 말함
#               범주형 자료가 아닌 연속형에서 주로 쓰이며 아래에서 보듯이 막대 그래프 X
ggplot(data=mtcars) +
geom_point(mapping = aes(x=as.factor(cyl), y=mpg))
# jitter 를 적용하면 조금씩 겹쳐지지 않게 그래프를 그려줌을 알 수 있음
ggplot(data=mtcars) +
geom_point(mapping = aes(x=as.factor(cyl), y=mpg), position = "jitter")
# 1) coord_flip() : x축 <--> y축
ggplot(data=mtcars) +
geom_bar(mapping = aes(x=cyl, fill=factor(am)), position="dodge")
# 1) coord_flip() : x축 <--> y축
ggplot(data=mtcars) +
geom_bar(mapping = aes(x=cyl, fill=factor(am)), position="dodge") + coord_flip()
# 2) coord_polar() : 극좌표계 이용
#  막대 그래프를 나이팅게일 차트(coxcomb chart)로 변환할 수 있음
ggplot(data=mtcars) +
geom_bar(mapping = aes(x=cyl, fill=as.factor(cyl)), position="dodge") +
coord_polar()
# 3) coord_trans() : 변수 변환(log 등)
#    ggplot2에서는 coord_trans() 함수를 통해서 변수의 직접 변환 없이 변환된 그래프를 그릴 수 있음
x   = c(-10:10)
aa  = c(-10:10)
bb  = aa^2
ccc = data.frame(aa,bb)
ccc
ggplot(data = ccc, mapping = aes(x = aa, y = bb)) + geom_point()
ggplot(data = ccc, mapping = aes(x = aa, y = bb)) + geom_point() + coord_trans(y="sqrt")
# ~ 오른쪽에 기재되는 변수별 level 별로 그래프를 각각 그려줌
ggplot(data=mtcars, mapping = aes(x=hp, y=mpg)) +
geom_point() +
facet_wrap(~cyl)
# cyl + am 별 그래프 각각 그려줌
ggplot(data=mtcars, mapping = aes(x=hp, y=mpg)) +
geom_point() +
facet_wrap(~cyl+am, labeller = label_both)
# 2) facet_grid() 함수
#  함수 안의 ~ 좌/우 변수를 각각 행/열로 나누어 2차원으로 sub그래프
ggplot(data=mtcars, mapping = aes(x=hp, y=mpg)) +
geom_point() +
facet_grid(am~cyl)
