wines.sc
scale
wines
wine.som <- som(  data = wines
, grid = somgrid(5, 4, "hexagonal")
, rlen = 100
, alpha = c(0.05, 0.01)
# , toroidal = F
, keep.data = T)
#####################
##### 연관 분석 #####
#####################
# arules package 에 있는 Adult 데이터 사용
install.packages("arules")
data("Adult")
library(arules)
data("Adult")
Adult
as.data.frame(Adult)
# as 함수를 사용항 transaction -> data.frame 형태로 변환하여 확인 가능
as(Adult, "data.frame")
# as 함수를 사용항 transaction -> data.frame 형태로 변환하여 확인 가능
Adult.df <- as(Adult, "data.frame")
head(Adult.df)
rules <- apriori(Adult)
# inspect 함수 사용시 apriori 함수를 통해 발굴된 규칙을 보여줌
inspect(rules)
# 지지도와 신뢰도 값을 지정하여 좀 더 유의미한 결과가 나올 수 있도록 함
# rhs를 income 변수에 대햇  small인지, large인지 대한 규칙만 나올 수 있도록 하여 income 변수에 대한 연관 규칙만 출력
rules <- apriori(Adult, parameter = list(support = 0.1, confidence = 0.6),  appearance = list(rhs=c('income=small','income=large', default = 'lhs'))
# 지지도와 신뢰도 값을 지정하여 좀 더 유의미한 결과가 나올 수 있도록 함
# rhs를 income 변수에 대햇  small인지, large인지 대한 규칙만 나올 수 있도록 하여 income 변수에 대한 연관 규칙만 출력
rules <- apriori(Adult
, parameter = list(support = 0.1, confidence = 0.6)
, appearance = list(rhs=c('income=small','income=large'), default = 'lhs')
, control = list(verbose = F))
# 지지도와 신뢰도 값을 지정하여 좀 더 유의미한 결과가 나올 수 있도록 함
# rhs를 income 변수에 대햇  small인지, large인지 대한 규칙만 나올 수 있도록 하여 income 변수에 대한 연관 규칙만 출력
adult.rules <- apriori(Adult
, parameter = list(support = 0.1, confidence = 0.6)
, appearance = list(rhs=c('income=small','income=large'), default = 'lhs')
, control = list(verbose = F))
adult.rules.sorted <- sort(adult.rules, by = 'lift')
adult.rules.sorted
inspect(head(adult.rules.sorted))
# 연관규칙 시각화
install.packages("arulesViz")
library(arulesViz)
plot(adult.rules.sorted, method = "graph", control = list(type = 'items', alpha = 0.5))
#####################################
##### 신경망 모형 - 단층 신경 망#####
#####################################
library(nnet)
#####################################
##### 신경망 모형 - 단층 신경 망#####
#####################################
library(nnet)
nn.iris <- nnet(Species ~., data = iris, size = 2, rang = 0.1, decay = 5e-4, maxit = 200)
nn.iris
summary(nn.iris) # 연결선에 대한 가중치
library(devtools)
source_url('https://gist.githubusercontent.com/Peque/41a9e20d6687f2f3108d/raw/85e14f3a292e126f1454864427e3a189c2fe33f3/nnet_plot_update.r')
plot.nnet(nn.iris)
# adabag 의 bagging 함수는 베깅을 이용하여 분류 수행
iris.bagging <- bagging(Species ~., data = iris, mfinal = 10)
library(adabag)
data(iris)
# adabag 의 bagging 함수는 베깅을 이용하여 분류 수행
iris.bagging <- bagging(Species ~., data = iris, mfinal = 10)
iris.bagging
# adabag 의 bagging 함수는 베깅을 이용하여 분류 수행
iris.bagging <- bagging(Species ~., data = iris, mfinal = 5)
iris.bagging
library(kohonen)
data("wines")
head(wines)
wines.sc <- scale(wines)
wines.sc
set.seed(7)
wine.som <- som(  data = wines.sc
, grid = somgrid(5, 4, "hexagonal")
, rlen = 100
, alpha = c(0.05, 0.01)
, toroidal = F
, keep.data = T)
som
wine.som <- som(  data = wines.sc
, grid = somgrid(5, 4, "hexagonal")
, rlen = 100
, alpha = c(0.05, 0.01)
, keep.data = T)
wines.sc
somgrid(5, 4, "hexagonal")
wine.som <- som(  data = wines.sc
, grid = somgrid(5, 4, "hexagonal")
, rlen = 100
, alpha = c(0.05, 0.01)
, keep.data = T)
test <- function(a = NA, b = NA, c = NA, d = NA){
print(paste0(a, b, c, d))
}
test <- function(a = NA, b = NA, c = NA, d = NA){
print(paste0(a, b, c, d))
}
a <- "hello"
b <- "my"
c <- "name"
d <- "is"
test(a
, b
, c
, d)
# parameter를 직접 호출 하지 않아도 전부 있으면 error X
test(a
, b
, c
, d)
test(a
, c
, d)
install.packages("curl")
library(data.table)
library(jsonlite)
library(curl)
library(dplyr)
getwd()
rm(list = ls())
data_1 <- data.frame(var1 = c(1, 2), var2 = c(3, 4))
data_2 <- data.frame(var1 = c('a', 'b'), var2 = c('c', 'd'))
data_3 <- data.frame(var1 = c(TRUE, TRUE), var2 = c(FALSE, TRUE))
file_1 <- data.frame(var1 = c(1, 2), var2 = c(3, 4))
file_2 <- data.frame(var1 = c('a', 'b'), var2 = c('c', 'd'))
file_3 <- data.frame(var1 = c(TRUE, TRUE), var2 = c(FALSE, TRUE))
data_1
data_2
ls()
ls(pattern = 'data_')
mget(ls(pattern = "data_"))
mget_data_ <- mget(ls(pattern = "data_"))
mget_file_ <- mget(ls(pattern = "file_"))
ls(pattern = 'data_')
mget_data_[[1]]
mget_data[1]
mget_data_[1]
mget_data_[[1]]
mget_data_["data_1"]
# 2. 문자열을 특정 길이로 만들고, 빈 자리는 0으로 만들고 싶을 때: sprintf {base}
df <- data.frame(var1 = c(1, 11, 111, 1111, 1111))
transform(df,
var1_01d = sprintf("%01d", var1),
var1_02d = sprintf("%02d", var1),
var1_03d = sprintf("%03d", var1))
transform(df,
var1_01d = sprintf("%1d", var1),
var1_02d = sprintf("%02d", var1),
var1_03d = sprintf("%03d", var1))
transform(df,
var1_01d = sprintf("%01d", var1),
var1_02d = sprintf("%2d", var1),
var1_03d = sprintf("%03d", var1))
class(df[,2])
df
df <- transform(df,
var1_01d = sprintf("%01d", var1),
var1_02d = sprintf("%02d", var1),
var1_03d = sprintf("%03d", var1))
df
class(df[,2])
e <- 3.141592
sprintf("%.1f", e)
sprintf("%.2f", e)
sprintf("%10.1f", e)
sprintf("%2.1f", e)
sprintf("%3.1f", e)
sprintf("%4.1f", e)
iris %>% filtering(Sepal.Length > 20 & Petal.Length )
iris %>% filtering(Sepal.Length > 20 & Petal.Length < 10)
iris %>% filter(Sepal.Length > 20 & Petal.Length < 10)
iris %>% filter(Sepal.Length < 5 & Petal.Length > 3)
iris %>% filter(Sepal.Length < 5 & Petal.Length > 3)
iris %>% filter(Sepal.Length < 5.0 & Petal.Length > 3.0)
# 2. 행 slicing
iris %>% slice(1:10)
# 2. 행 slicing
iris %>% slicing(1:10)
# 2. 행 slicing
iris %>% slice(1:10)
# 3. 열 선택
iris %>% dplyr::select(Sepal.Length, Petal.Length)
# 5. 해당 문자열로 시작하는 열 선택
iris %>% dplyr::ends_with("Length")
# 5. 해당 문자열로 시작하는 열 선택
iris %>% dplyr::ends_with(Length)
# 5. 해당 문자열로 시작하는 열 선택
iris %>% select(ends_with(Length))
# 5. 해당 문자열로 시작하는 열 선택
iris %>% select(ends_with("Length"))
# 5. 해당 문자열로 시작하는 열 선택
iris %>% select(starts_with("Sepal"))
# 6. 해당 문자열로 끝나는 열 선택
iris %>% select(ends_with("Length"))
# 7. 해당 문자열이 포함되는 열 선택
iris %>% select(contains("Sepal"))
# 7. 해당 문자열이 포함되는 열 선택
iris %>% select(contains("."))
# 8. 정규 표현식에 해당하는 컬럼 선택
iris %>% select(match("Sep"))
# 8. 정규 표현식에 해당하는 컬럼 선택
iris %>% select(ends_with("Length"))
iris %>% select(one_of(vars))
# 9. 변수 이름 글부에 포함된 모든 열 선택
vars <- c("test1", "test2", "test3")
iris %>% select(one_of(vars))
iris %>% select(num_range("V", 2:3))
data.frame(V = c(1,2,3,4,5), V2 = c('A', 'B', 'C', 'D', 'E'))
test <- data.frame(V = c(1,2,3,4,5), V2 = c('A', 'B', 'C', 'D', 'E'))
test %>% sample_n(3, replace F)
test %>% sample_n(3, replace  = F)
test %>% sample_n(3, replace  = F)
test %>% sample_n(3, replace  = F)
iris %>% group_by(Species) %>% sample_n(10)
iris %>% mutate(  sum  = Sepal.Length + Petal.Length
, sum2 = Sepal.Length + Petal.Length)
df.name <- data.frame(ID = c(1:3), name = c("Chulsu/Kim", "Younghei/Lee", "Dongho/Choi"))
df.name
do.call("rbind", strsplit(df.name$name))
do.call("rbind", strsplit(df.name$name, fixed = T))
strsplit
do.call("rbind", strsplit(x = df.name$name, split = "/",  fixed = T))
do.call("rbind", strsplit(x = df.name$name, split = "/")
do.call("rbind", strsplit(x = df.name$name, split = "/"))
do.call("rbind", strsplit(x = df.name$name, split = "/"))
df.name$name
df.name <- data.frame(ID = c(1:3), name = c("Chulsu/Kim", "Younghei/Lee", "Dongho/Choi"), stringsAsFactors = F)
df.name
do.call("rbind", strsplit(x = df.name$name, split = "/"))
do.call("rbind", strsplit(x = df.name$name, split = "/")
) %>% data.frame
write.fwf
data.frame(V = c(1,2,3,4,5,6), V1 = c("A", "B", "C", "D", "E"))
test <- data.frame(V = c(1,2,3,4,5,6), V1 = c("A", "B", "C", "D", "E"))
write.table(test
file = "C:/r"
)
write.table(test,
file = "C:/r"
)
write.table(test,
file = "C:/r/"
)
test
write.table(test,
file = "C:/r"
)
write.table(test,
file = "C:/r"
)
write.table(x = test,
file = "C:/r"
)
write.table(x = test1,
file = "C:/r"
)
test1 <- data.frame(V = c(1,2,3,4,5,6), V1 = c("A", "B", "C", "D", "E"))
write.table(x = test1,
file = "C:/r"
)
test1
test1 <- data.frame(V = c(1,2,3,4,5,6), V1 = c("A", "B", "C", "D", "E", "F"))
write.table(x = test1,
file = "C:/r"
)
write.table(x = test1,
file = "test1.txt"
)
write.table(x = test1,
file = "test1.txt",
fixed = F
)
write.table(x = test1,
file = "test1.txt",
row.names =  F
)
read.fwf("test1.txt", widths = c(1, 1))
read.fwf("test1.txt", widths = c(2, 2))
read.fwf("test1.txt", widths = c(2, 3))
read.fwf("test1.txt", widths = c(1, 1), sep = " ")
read.fwf("test1.txt", widths = c(1, 1, 1 ), sep = " ")
read.fwf("test1.txt", widths = c(1), sep = " ")
rep(1:10)
seq(from = 1, to = 10)
getwd()
library(readr)
setwd("C:/ADP자료/")
readr::guess_encoding(file = "housing.csv")[1,1]
encoding_type <- readr::guess_encoding(file = "housing.csv")[1,1]
encoding_type
encoding_type <- readr::guess_encoding(file = "housing.csv")[1,1] %>%  as.character()
encoding_type <- readr::guess_encoding(file = "housing.csv")[1,1] %>%  as.character
library(dplyr)
encoding_type <- readr::guess_encoding(file = "housing.csv")[1,1] %>%  as.character
encoding_type
?fread
## 데이터 로딩 방법 3가지
### 1. data.table::fread
data.table::fread(  file       = 'housing.csv'
, data.table = F
, header = T
, stringsAsFactors = F
, na.strings = c("NA", "NaN", "\\n"))
## 데이터 로딩 방법 3가지
### 1. data.table::fread
hosuing <- data.table::fread(  file       = 'housing.csv'
, data.table = F
, header = T
, stringsAsFactors = F
, na.strings = c("NA", "NaN", "\\n"))
## 데이터 로딩 방법 3가지
### 1. data.table::fread
housing <- data.table::fread(  file       = 'housing.csv'
, data.table = F
, header = T
, stringsAsFactors = F
, na.strings = c("NA", "NaN", "\\n"))
head(housing)
## 데이터 로딩 방법 3가지
### 1. data.table::fread
housing <- data.table::fread(  file       = 'housing.csv'
, data.table = F
, header = F
, stringsAsFactors = F
, na.strings = c("NA", "NaN", "\\n"))
housing
head(housing)
### 2. readr::read_csv(encoding 문제가 있는 경우,)
readr::read_csv(file = 'housing.csv',
col_names = F,
locale = locale('ko', encoding = encoding_type)
)
### 2. readr::read_csv(encoding 문제가 있는 경우,)
housing <- readr::read_csv(file = 'housing.csv',
col_names = F,
locale = locale('ko', encoding = encoding_type)
) %>%  data.frame
housing
### 2. readr::read_csv(encoding 문제가 있는 경우,)
housing <- readr::read_csv(file = 'housing.csv',
col_names = F,
locale = locale('ko', encoding = encoding_type),
na = c("NA", "NaN", "\\n")
) %>%  data.frame
### 2. readr::read_csv(encoding 문제가 있는 경우,)
housing <- readr::read_csv(file = 'housing.csv',
col_names       = F,
locale          = locale('ko', encoding = encoding_type),
na              = c("NA", "NaN", "\\n")
) %>%  data.frame
head(housing)
### 3. excel loading
library(readxl)
readxl::read_xls(path = "example.xls")
read_excel
readxl::read_xls(path = "example.xls",
col_names = T
)
example <- readxl::read_xls(path = "example.xls",
col_names = T
)
example
example <- readxl::read_xls(path = "example.xls",
col_names = T
) %>% data.frame()
example
example <- readxl::read_xls(path = "example.xls",
col_names = T,
row.names = T
) %>% data.frame()
example <- readxl::read_xls(path = "example.xls",
col_names = T,
) %>% data.frame()
example
example[,-1]
example <- example[,-1]
example
read.table(file = 'test.txt',
sep = "\n")
read.table(file = 'test1.txt',
sep = "\n")
read.table(file = 'test1.txt',
sep = " ")
read.table(file = 'test.txt',
sep = " ")
read.table(file = 'test.txt',
sep = " ",
header = T)
test <- read.table(file = 'test.txt',
sep = " ",
header = T)
head(test)
head(test)
## 변수 타입 설정 script
library(dplyr)
mtcars %>% mutate_if(is.factor, as.character)
# 1.1 mutate_if function 활용
colnames(mtcars1)
# 1.1 mutate_if function 활용
colnames(mtcars)
head(mtcars)
mtcars2 <- mtcars %>% mutate_at("mpg", as.character) # 특정 변수를 다른 변수형으로 바꾸고 싶은 경우
mtcars2
str(mtcars2)
head(mtcars)
mtcars3 <- mtcars  %>% mutate_at("cyl", as.numeric  )     # 특정 변수명을 포함하는 값들을 변환 하고 싶은 경우,
mtcars3
matches
mtcars3 <- mtcars  %>% mutate_at(matches("ge"),  as.character)     # 특정 변수명을 포함하는 값들을 변환 하고 싶은 경우,
mtcars3
mtcars3 <- mtcars  %>% mutate_at(matches("ge"),  as.character)     # 특정 변수명을 포함하는 값들을 변환 하고 싶은 경우,
mtcars3 <- mtcars  %>% mutate_at(vars(matches("ge")),  as.character)     # 특정 변수명을 포함하는 값들을 변환 하고 싶은 경우,
mtcars3
str(mtcars3)
# 2. 날짜형 변환
format_iso_8601(parse_iso_8601("2013-02-08"))
format_iso_8601
library(parsedate)
install.packages("parsedate")
# 2. 날짜형 변환
parsedate::format_iso_8601(parse_iso_8601("2013-02-08"))
parse_iso_8601
# 2. 날짜형 변환
parsedate::format_iso_8601(parsedate::parse_iso_8601("2013-02-08"))
# 2. 날짜형 변환
parsedate::format_iso_8601(parsedate::parse_iso_8601("20130208"))
# 2. 날짜형 변환
parsedate::format_iso_8601(parsedate::parse_iso_8601("201302"))
# 2.1 오늘 날짜 반환 ----
Sys.Date()
date( )
date( )     # 현재 날짜와 시간 반환
# 2.1 오늘 날짜 반환 ----
Sys.Date()  # 오늘 날짜 반환
parsedate::format_iso_8601(parsedate::parse_iso_8601("20130208"))
# as.Date, strptime
# help 함수를 통해 변환 타입 확인 가능
help(as.Date)
# 2.4 seq function을 통한 날짜 데이터 생성
seq(as.Date("2020-08-01"), as.Date("2020-08-31"), 1)
lubricate
# 3. lubricate package
# 날짜 연산을 위해 많이 사용되는 패키지
library(lubricate)
install.packages("lubricate")
# 3. lubricate package
# 날짜 연산을 위해 많이 사용되는 패키지
library(lubricate)
install.packages("lubridate")
# 3. lubridate package
# 날짜 연산을 위해 많이 사용되는 패키지
library(lubridate)
date <- now()
date
year(date)
month(date)
day(date)
wday(date)
wday(date, label = T)
wday(date)
# 날짜형 계산이 편하게 가능
date + year(1)
date <- now()
# 날짜형 계산이 편하게 가능
date + year(1)
# 날짜형 계산이 편하게 가능
date + years(1)
years(date)
year(date)
# 날짜형 계산이 편하게 가능
date + years(1)
date
date + months(1)
date + days(1)
date + minutes(1)
date + seconds(1)
# 3.1 lubridate::ymd
# 어떤 날짜형태든 날짜형으로 변환해줌
lubridate::ymd(20200830)
lubridate::ymd(202008)
lubridate::ymd(2020-11-30)
lubridate::ymd(2020-11-31)
lubridate::ymd(2020-11-30)
lubridate::ymd(2020-08-30)
# 3.1 lubridate::ymd
# 어떤 날짜형태든 날짜형으로 변환해줌, 단 %y-%m-%d 는 지켜야함
lubridate::ymd(20200830)
lubridate::ymd(2020-08-30)
lubridate::ymd(202008-30)
lubridate::ymd
lubridate::ymd(20200830)
lubridate::ymd(2020-08-30)
lubridate::ymd("2020-08-30")
lubridate::ymd("2020-11-30")
today()
interval("2020-08-30", today())
today()
interval("2020-08-30", today()) %>% as.period()
interval("2020-01-30", today()) %>% as.period()
# 3.3 as.duration function
# 초 단위의 차이 값을 계산해줌
as.duration("2020-01-30", today())
# 3.3 as.duration function
# 초 단위의 차이 값을 계산해줌
interval("2020-01-30", today()) %>% as.duration()
